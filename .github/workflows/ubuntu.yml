# Copyright (c) 2021, 2022 [Ribose Inc](https://www.ribose.com).
# All rights reserved.
# This file is a part of tamatebako
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

name: Ubuntu

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - .github/workflows/lint.yml
      - .github/workflows/macos.yml
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - .github/workflows/lint.yml
      - .github/workflows/macos.yml
  workflow_dispatch:

env:
# Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
# The folder for dwarfs and other dependenies
  DEPS: deps
# GitHub dependencies'
  INCBIN_TAG:    "348e36b"
  DWARFS_WR_TAG: "maxirmx_v0.1.7"
# Tarball dependencies
#  RUBY_VER:   "2.7.4" -- upgraded to 2.7.5 because of Ruby/clang issue [https://bugs.ruby-lang.org/issues/17865]
#  RUBY_HASH:  "3043099089608859fc8cce7f9fdccaa1f53a462457e3838ec3b25a7d609fbc5b"
  RUBY_VER:   "2.7.5"
  RUBY_HASH:  "2755b900a21235b443bb16dadd9032f784d4a88f143d852bc5d154f22b8781f1"
# Bundler version
  BUNDLER_VER: "2.2.3"
# Cache version
  CACHE_VER: "09"

jobs:
  setup:
    name: setup ${{ matrix.os }} [CC ${{ matrix.env.CC }}]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04 ]
        env:
          - CC: gcc
            CXX: g++
          - CC: clang
            CXX: clang++
    env: ${{ matrix.env }}
    steps:
      - name: Checkout tebako packaging environment
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

# https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
# https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
# Already installed: bison flex pkg-config

# gcc/g++ 9 is also there otherwise we would need:
# sudo add-apt-repository ppa:ubuntu-toolchain-r/test
# sudo apt update
# sudo apt install gcc-9 g++-9

# cmake good enough is also at GHA. Otherswise:
# sudo apt-get remove --purge --auto-remove cmake
# sudo apt-get update
# sudo apt-get install -y software-properties-common lsb-release
# sudo apt-get clean all
# wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
# sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
# sudo apt update
# sudo apt install kitware-archive-keyring
# sudo rm /etc/apt/trusted.gpg.d/kitware.gpg
# sudo apt update
# sudo apt install cmake

      - name: Switch to gcc-9
        if: ${{ matrix.env.CC == 'gcc' }}
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          sudo update-alternatives --set gcc /usr/bin/gcc-9

      - name: Install packages
        run: |
          sudo apt-get -y update
          sudo apt-get -y install \
          binutils-dev libarchive-dev libevent-dev acl-dev \
          libdouble-conversion-dev libiberty-dev liblz4-dev liblzma-dev libssl-dev \
          libboost-context-dev libboost-filesystem-dev libboost-program-options-dev \
          libboost-regex-dev libboost-system-dev libboost-thread-dev \
          libunwind-dev libdwarf-dev libelf-dev libfuse-dev libgoogle-glog-dev \
          libffi-dev libgdbm-dev libyaml-dev libncurses-dev libreadline-dev \
          libsqlite3-dev

      - name: Update libfmt (bionic)
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt-get -y remove libfmt-dev
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository ppa:team-xbmc/ppa
          sudo apt-get -y update
          sudo apt-get -y install libfmt-dev

      - name: Install libfmt (focal)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: sudo apt-get install libfmt-dev

      - name: Install libjemalloc (not bionic or not clang)
        if: ${{ matrix.os != 'ubuntu-18.04' || matrix.env.CC != 'clang' }}
        run: sudo apt-get -y install libjemalloc-dev

      - name: Install libjemalloc 5 (bionic and clang)
        if: ${{ matrix.os == 'ubuntu-18.04' && matrix.env.CC == 'clang' }}
        run: |
          sudo apt-get remove libjemalloc-dev
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure --prefix='/usr'
          make
          sudo make install

      - name: Create deps folder
        run: mkdir ${{ github.workspace }}/${{ env.DEPS }}

      - name: Process cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/${{ env.DEPS }}
          key: ${{ matrix.os }}-${{ matrix.env.CC }}-${{ env.DWARFS_WR_TAG }}-${{ env.INCBIN_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: tebako setup
        run: ${{ github.workspace }}/bin/tebako setup

  tests-1:
    needs: setup
    name: tests-1 ${{ matrix.os }} [CC ${{ matrix.env.CC }}]
    if: ${{ !contains(github.event.head_commit.message, '[cache only]') && !contains(github.event.head_commit.message, '[metanorma only]') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04 ]
        env:
          - CC: gcc
            CXX: g++
          - CC: clang
            CXX: clang++
    env: ${{ matrix.env }}
    steps:
      - name: Checkout tebako packaging environment
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Switch to gcc-9
        if: ${{ matrix.env.CC == 'gcc' }}
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          sudo update-alternatives --set gcc /usr/bin/gcc-9

      - name: Install packages
        run: |
          sudo apt-get -y update
          sudo apt-get -y install \
          binutils-dev libarchive-dev libevent-dev acl-dev \
          libdouble-conversion-dev libiberty-dev liblz4-dev liblzma-dev libssl-dev \
          libboost-context-dev libboost-filesystem-dev libboost-program-options-dev \
          libboost-regex-dev libboost-system-dev libboost-thread-dev \
          libunwind-dev libdwarf-dev libelf-dev libfuse-dev libgoogle-glog-dev \
          libffi-dev libgdbm-dev libyaml-dev libncurses-dev libreadline-dev \
          libsqlite3-dev

      - name: Update libfmt (bionic)
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt-get -y remove libfmt-dev
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository ppa:team-xbmc/ppa
          sudo apt-get -y update
          sudo apt-get -y install libfmt-dev

      - name: Install libfmt (focal)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: sudo apt-get install libfmt-dev

      - name: Install libjemalloc (not bionic or not clang)
        if: ${{ matrix.os != 'ubuntu-18.04' || matrix.env.CC != 'clang' }}
        run: sudo apt-get -y install libjemalloc-dev

      - name: Install libjemalloc 5 (bionic and clang)
        if: ${{ matrix.os == 'ubuntu-18.04' && matrix.env.CC == 'clang' }}
        run: |
          sudo apt-get remove libjemalloc-dev
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure --prefix='/usr'
          make
          sudo make install

      - name: Create deps folder
        run: mkdir ${{github.workspace}}/${{env.DEPS}}

      - name: Process cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/${{ env.DEPS }}
          key: ${{ matrix.os }}-${{ matrix.env.CC }}-${{ env.DWARFS_WR_TAG }}-${{ env.INCBIN_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: Cache check
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Failed to upload cache"
          false

      - name: Checkout shell test framework
        uses: actions/checkout@v2
        with:
          repository: kward/shunit2
          path: ${{github.workspace}}/tests/shunit2
          fetch-depth: 1

      - name: Run tebako tests (set no. 1)
# show cmake output aka verbose (yes/no)
        env:
          VERBOSE: yes
        run:  ${{github.workspace}}/tests/scripts/functional-tests.sh

      - name: Upload tebako test packages
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        uses: actions/upload-artifact@v2
        with:
          name: test-packages
          path: |
            test-01-package
            test-11-package
            test-15-package
            test-18-package
            test-19-package

  tests-2:
    needs: setup
    name: tests-2 ${{ matrix.os }} [CC ${{ matrix.env.CC }}]
    if: ${{ !contains(github.event.head_commit.message, '[cache only]') && !contains(github.event.head_commit.message, '[metanorma only]') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04 ]
        env:
          - CC: gcc
            CXX: g++
          - CC: clang
            CXX: clang++
    env: ${{ matrix.env }}
    steps:
      - name: Checkout tebako packaging environment
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Switch to gcc-9
        if: ${{ matrix.env.CC == 'gcc' }}
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          sudo update-alternatives --set gcc /usr/bin/gcc-9

      - name: Install packages
        run: |
          sudo apt-get -y update
          sudo apt-get -y install \
          binutils-dev libarchive-dev libevent-dev libjemalloc-dev acl-dev \
          libdouble-conversion-dev libiberty-dev liblz4-dev liblzma-dev libssl-dev \
          libboost-context-dev libboost-filesystem-dev libboost-program-options-dev \
          libboost-regex-dev libboost-system-dev libboost-thread-dev \
          libunwind-dev libdwarf-dev libelf-dev libgoogle-glog-dev \
          libffi-dev libgdbm-dev libyaml-dev libncurses-dev libreadline-dev \
          libsqlite3-dev

      - name: Update libfmt (bionic)
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt-get -y remove libfmt-dev
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository ppa:team-xbmc/ppa
          sudo apt-get -y update
          sudo apt-get -y install libfmt-dev

      - name: Install libfmt (focal)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: sudo apt-get install libfmt-dev

      - name: Install libjemalloc (not bionic or not clang)
        if: ${{ matrix.os != 'ubuntu-18.04' || matrix.env.CC != 'clang' }}
        run: sudo apt-get -y install libjemalloc-dev

      - name: Install libjemalloc 5 (bionic and clang)
        if: ${{ matrix.os == 'ubuntu-18.04' && matrix.env.CC == 'clang' }}
        run: |
          sudo apt-get remove libjemalloc-dev
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure --prefix='/usr'
          make
          sudo make install

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VER }}
          bundler: ${{ env.BUNDLER_VER }}

      - name: Create deps folder
        run: mkdir ${{ github.workspace }}/${{ env.DEPS }}

      - name: Process cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/${{ env.DEPS }}
          key: ${{ matrix.os }}-${{ matrix.env.CC }}-${{ env.DWARFS_WR_TAG }}-${{ env.INCBIN_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: Cache check
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Failed to upload cache"
          false

      - name: Run tebako tests (set no. 2)
        run: |
          cd ${{github.workspace}}/tests-2
          bundle install
          cd ${{github.workspace}}
          ruby ${{github.workspace}}/tests-2/tebako-test.rb

  cross-test-ubuntu-18-to-ubuntu-20:
    if: ${{ !contains(github.event.head_commit.message, '[cache only]') && !contains(github.event.head_commit.message, '[metanorma only]') }}
    needs: tests-1
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout tebako packaging environment
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Download test packages
        uses: actions/download-artifact@v2
        with:
          name: test-packages

      - name: Run test packages
        run:  ${{github.workspace}}/tests/scripts/cross-tests.sh

  package-metanorma:
    needs: setup
    name: package-metanorma ${{ matrix.os }} [CC ${{ matrix.env.CC }}]
    if: ${{ !contains(github.event.head_commit.message, '[cache only]') && !contains(github.event.head_commit.message, '[tests only]') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04 ]
        env:
          - CC: gcc
            CXX: g++
          - CC: clang
            CXX: clang++
    env: ${{ matrix.env }}
    steps:
      - name: Checkout tebako packaging environment
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Switch to gcc-9
        if: ${{ matrix.env.CC == 'gcc' }}
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          sudo update-alternatives --set gcc /usr/bin/gcc-9

      - name: Install packages
        run: |
          sudo apt-get -y update
          sudo apt-get -y install \
          binutils-dev libarchive-dev libevent-dev libjemalloc-dev acl-dev \
          libdouble-conversion-dev libiberty-dev liblz4-dev liblzma-dev libssl-dev \
          libboost-context-dev libboost-filesystem-dev libboost-program-options-dev \
          libboost-regex-dev libboost-system-dev libboost-thread-dev \
          libunwind-dev libdwarf-dev libelf-dev libfuse-dev libgoogle-glog-dev \
          libffi-dev libgdbm-dev libyaml-dev libncurses-dev libreadline-dev \
          libsqlite3-dev

      - name: Update libfmt (bionic)
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          sudo apt-get -y remove libfmt-dev
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository ppa:team-xbmc/ppa
          sudo apt-get -y update
          sudo apt-get -y install libfmt-dev

      - name: Install libfmt (focal)
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: sudo apt-get install libfmt-dev

      - name: Install libjemalloc (not bionic or not clang)
        if: ${{ matrix.os != 'ubuntu-18.04' || matrix.env.CC != 'clang' }}
        run: sudo apt-get -y install libjemalloc-dev

      - name: Install libjemalloc 5 (bionic and clang)
        if: ${{ matrix.os == 'ubuntu-18.04' && matrix.env.CC == 'clang' }}
        run: |
          sudo apt-get remove libjemalloc-dev
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure --prefix='/usr'
          make
          sudo make install

      - name: Create deps folder
        run: mkdir ${{github.workspace}}/${{env.DEPS}}

      - name: Process cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/${{env.DEPS}}
          key: ${{ matrix.os }}-${{ matrix.env.CC }}-${{ env.DWARFS_WR_TAG }}-${{ env.INCBIN_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: Cache check
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Failed to upload cache"
          false

      - name: Checkout packed-mn
        uses: actions/checkout@v2
        with:
          repository: metanorma/packed-mn
          path: ${{github.workspace}}/packed-mn
          ref: maxirmx-tebako-packager

      - name: Package metanorma
        run: ${{github.workspace}}/bin/tebako press --root=${{github.workspace}}/packed-mn --entry-point=bin/metanorma --output=metanorma-package
