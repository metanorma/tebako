#! /bin/bash
# Copyright (c) 2021, 2022 [Ribose Inc](https://www.ribose.com).
# All rights reserved.
# This file is a part of tamatebako
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

# More safety, by turning some bugs into errors.
# Without `errexit` you don’t need ! and can replace
# PIPESTATUS with a simple $?
set -o errexit -o pipefail -o noclobber -o nounset

run_help() {
echo "Usage: "
echo "  tebako setup [-p|--prefix=<path>] [-t|--target=[guess|arm64-apple-macos11]"
echo "         Tebako prefix defaults to current directory"
echo "         Target architecture is either the same as build architecture or Apple MacOs arm64 (the only cross-build target supported)"
echo "  tebako press [-p|--prefix=<path>] -r|--root=<path> -e|--entry-point=<path> [-o|--output=<file name>]"
echo "                                   [-l|--log-level=<error|warn|debug> [-t|--target=[guess|arm64-apple-macos11]" 
echo "         Tebako prefix defaults to current directory"
echo "         Packaged file defaults to 'entry point' file name in the current directory"
echo "  tebako clean [-p|--prefix=<path>]"
echo "         Tebako prefix defaults to current directory"
echo "         This command will delete all artifacts created by setup and press commands."
echo "         Normally you do not need to do it since tebako packager optimizes artifacts lifecycle on its own."
}

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  echo "Setting up Linux environment"
  gOpt="getopt"
#  uFlags="${CXXFLAGS:=}"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  echo "Setting up MacOS environment"
# shellcheck disable=SC2251
  ! gOpt="$(brew --prefix gnu-getopt)/bin/getopt"
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    echo "Could not find gnu getopts, exiting"
    exit 8
  fi
#  uFlags="-DTARGET_OS_SIMULATOR=0 -DTARGET_OS_IPHONE=0 ${CXXFLAGS:=}"
else
  echo "... $OSTYPE is not supported yet, exiting"
  exit 7
fi


# -allow a command to fail with !’s side effect on errexit
# -use return value from ${PIPESTATUS[0]}, because ! hosed $?
# shellcheck disable=SC2251
! "$gOpt" --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo "'getopt --test' failed in this environment."
   exit 1
fi

OPTIONS=hr:e:o:p:l:t:
LONGOPTS=help,root:,entry-point:,output:,prefix:,log-level:,target:

# -regarding ! and PIPESTATUS see above
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
# shellcheck disable=SC2251
! PARSED=$("$gOpt" --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi

# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

prefix=- root=- entryPoint=- packageName=- logLevel="error" target="guess"
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -t|--target)
            target="$2"
            shift 2
            ;; 
        -l|--log-level)
            logLevel="$2"
            shift 2
            ;;
        -p|--prefix)
            prefix="$2"
            shift 2
            ;;
        -r|--root)
            root="$2"
            shift 2
            ;;
        -e|--entry-point)
            entryPoint="$2"
            shift 2
            ;;
        -o|--output)
            packageName="$2"
            shift 2
            ;;
        -h|--help)
            run_help
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# handle non-option arguments
if [[ $# -ne 1 ]]; then
    echo "Missing command"
    run_help
    exit 4
fi

cmk=$( which cmake )

if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  echo "Failed to find cmake"
  exit 5
else
  echo "Using cmake at $cmk"
fi

if [[ "$prefix" == "-" ]]; then
  prefix="$( cd "$( dirname "$0" )"/.. && pwd )"
else
  if [[ "$prefix" != /* ]]; then
    prefix="$( pwd )"/"$prefix"
  fi
fi

if [[ "$logLevel" != "error" && "$logLevel" != "warn" && "$logLevel" != "debug" && "$logLevel" != "trace" ]]; then
  echo "Unknown log-level setting '$logLevel'. Known values are 'error', 'warn', 'debug', 'trace'"
  exit 11
fi

case "$target" in
  guess)
      ;;
  arm64-apple-macos11)
      if [[ "$OSTYPE" != "darwin"* ]]; then
        echo "Cross build for arm64-apple-macos11 is possible on MacOs only"
        exit 9
      fi
      ;;
  *)
      echo "Unknown target setting '$target'. The only cross build target supported is 'arm64-apple-macos11'"
      exit 10
      ;;
esac

export CC=${CC:-gcc}
export CXX=${CXX:-g++}

case "$1" in
	setup)
    echo "Setting up tebako at $prefix"
    CXXFLAGS="${uFlags:=}" cmake -DCMAKE_BUILD_TYPE=Release   \
          -DDEPS:STRING="$prefix/deps"    \
          -DSETUP_MODE:BOOLEAN=ON         \
          -DTEBAKO_BUILD_TARGET="$target" \
          -G "Unix Makefiles"             \
          -S "$prefix"                    \
          -B "$prefix/output"	 && rc=$? || rc=$?
    if [ $rc -ne 0 ]; then
      echo "'tebako setup' configure step failed"
      exit 101
    fi

    CXXFLAGS="${uFlags:=}" cmake --build "$prefix/output" --target setup && rc=$? || rc=$?
    if [ $rc -ne 0 ]; then
      echo "'tebako setup' build step failed"
      exit 102
    fi
    ;;
	press)
    if [ "$root" == "-" ]; then
      echo "Running tebako press requires project root"
      run_help
      exit 5
    fi
    if [ "$entryPoint" == "-" ]; then
      echo "Running tebako press requires entry point"
      run_help
      exit 6
    fi
    if [ "$packageName" == "-" ]; then
      filename=$(basename -- "$entryPoint")
      packageName="${filename%.*}"
    fi

    echo "Running tebako press at $prefix"
    echo "   Project root:            $root"
    echo "   Application entry point: $entryPoint"
    echo "   Package file name:       $packageName"
#		CXXFLAGS="${uFlags:=}" 
    cmake -DCMAKE_BUILD_TYPE=Release           \
              -DDEPS:STRING="$prefix/deps"     \
              -DROOT:STRING="$root"            \
              -DENTRANCE:STRING="$entryPoint"  \
              -DPCKG:STRING="$packageName"     \
              -DLOG_LEVEL:STRING="$logLevel"   \
              -DTEBAKO_BUILD_TARGET="$target"  \
              -DSETUP_MODE:BOOLEAN=OFF         \
              -G "Unix Makefiles"              \
              -S "$prefix"                     \
              -B "$prefix/output" && rc=$? || rc=$?
    if [ $rc -ne 0 ]; then
      echo "'tebako press' configure step failed"
      exit 103
    fi

#    CXXFLAGS="${uFlags:=}" 
    cmake --build "$prefix/output" --target tebako && rc=$? || rc=$?
    if [[ $rc -ne 0 ]]; then
      echo "'tebako press' build step failed"
      exit 104
    fi
    ;;
	clean)
    echo "Cleaning tebako setup and press artifacts at $prefix"
    rm -rf "$prefix"/output
    rm -rf "$prefix"/deps
    ;;
	*)
		echo "Unknown command '$1'"
		run_help
		exit 5
		;;
esac

exit 0;

